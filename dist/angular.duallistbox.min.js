/**
 * angular.duallistbox
 * @version v0.0.13 - 2015-02-11
 * @author Michael Walker (killyosaur@hotmail.com)
 * @link https://github.com/killyosaur/angularduallistbox
 * @license Creative Commons Attribution-ShareAlike 4.0 International License
**/
"use strict"; angular.module("killyosaur.dualListBox", []).run(["$templateCache", function (t) { t.put("template/duallistbox/boxes.html", '<div class="form-group row">    <div class="col-md-6">        <h4><span>{{options.sourceTitle}}</span><small> - showing {{sourceFiltered.length}}</small></h4>        <input style="margin-bottom: 5px;" class="filter form-control" type="text" ng-model="sourceFilter" placeholder="Filter" />        <button ng-show="options.moveAllBtn" data-type="atr" class="btn btn-default col-md-6" style="margin-bottom: 5px;" type="button" ng-click="move($event)" ng-disabled="isControlDisabled(sourceFiltered.length == 0)">            <span class="glyphicon glyphicon-list"></span><span class="glyphicon glyphicon-chevron-right"></span>        </button>        <button data-type="str" class="btn btn-default " ng-class="{\'col-md-6 pull-right\': options.moveAllBtn, \'col-md-12\': !options.moveAllBtn}" style="margin-bottom: 5px;" type="button" ng-click="move($event)" ng-disabled="isControlDisabled(!sourceSelectedData.length || sourceSelectedData.length == 0)">            <span class="glyphicon glyphicon-chevron-right"></span>        </button>        <select ng-style="selectionBoxStyle" multiple="multiple" ng-model="sourceSelectedData" ng-options="item[options.text] for item in sourceFiltered = (sourceData | filter:filterBy(sourceFilter))"></select>    </div>    <div class="col-md-6">        <h4><span>{{options.destinationTitle}}</span><small> - showing {{destinationFiltered.length ? destinationFiltered.length : 0}}</small></h4>        <input style="margin-bottom: 5px;" class="filter form-control" type="text" ng-model="destinationFilter" placeholder="Filter" />        <button data-type="stl" class="btn btn-default " ng-class="{\'col-md-6\': options.moveAllBtn, \'col-md-12\': !options.moveAllBtn}"style="margin-bottom: 5px;" type="button" ng-click="move($event)" ng-disabled="isControlDisabled(!destinationSelectedData.length || destinationSelectedData.length == 0)">            <span class="glyphicon glyphicon-chevron-left"></span>        </button>        <button ng-show="options.moveAllBtn" data-type="atl" class="btn btn-default col-md-6 pull-right" style="margin-bottom: 5px;" type="button" ng-click="move($event)" ng-disabled="isControlDisabled(!destinationFiltered || destinationFiltered.length == 0)">            <span class="glyphicon glyphicon-chevron-left"></span><span class="glyphicon glyphicon-list"></span>        </button>        <select ng-style="selectionBoxStyle" multiple="multiple" ng-model="destinationSelectedData" ng-options="item[options.text] for item in destinationFiltered = (destinationData | filter:filterBy(destinationFilter))"></select>    </div></div>') }]).controller("dualListBoxController", ["$scope", "$attrs", "$timeout", "$q", function (t, e, n, o) { function l() { return angular.isDefined(t.controlDisabled) && t.controlDisabled() || r } function i(t, e) { for (var n = -1, o = 0, l = t.length; l > o; o++) { var i = t[o]; if (angular.toJson(i) === angular.toJson(e)) { n = o; break } } return n } var a = this, s = { $setViewValue: angular.noop }, r = !1; this.init = function (t) { s = t, s.$render = function () { a.render() } }, this.render = function () { t.destinationData = s.$modelValue }, e.$observe("disabled", function (t) { r = t }), t.$watch("destinationData", function (e) { if (!angular.isDefined(t.source) || !angular.isArray(t.source)) throw "No valid data source available!"; var n = 0, o = t.source.length; for (t.sourceData = []; o > n; n++) { var l = t.source[n]; (angular.isUndefined(e) || -1 === i(e, l)) && t.sourceData.push(l) } }), t.isControlDisabled = function (t) { return angular.isUndefined(t) && l() || t || l() }, t.move = function (e) { e.preventDefault(); var l = o.defer(), a = e.currentTarget; return n(function () { var e = a.getAttribute("data-type"), n = []; n = n.concat(t.destinationData), t.$apply(function () { switch (e) { case "atr": (t.sourceFiltered.length >= t.options.maxAllBtn && confirm(t.options.warning) || t.sourceFiltered.length < t.options.maxAllBtn) && (n = n.concat(t.sourceFiltered), t.sourceSelectedData && (t.sourceSelectedData.length = 0)); break; case "atl": (t.destinationFiltered.length >= t.options.maxAllBtn && confirm(t.options.warning) || t.destinationFiltered.length < t.options.maxAllBtn) && (angular.forEach(t.destinationFiltered, function (t) { var e = i(n, t); n.splice(e, 1) }), t.destinationSelectedData && (t.destinationSelectedData.length = 0)); break; case "str": n = n ? n.concat(t.sourceSelectedData) : t.sourceSelectedData, t.sourceSelectedData.length = 0; break; case "stl": angular.forEach(t.destinationSelectedData, function (e) { var o = i(t.destinationData, e); n.splice(o, 1) }), t.destinationSelectedData.length = 0 } }), s.$setViewValue(n), s.$render(), l.resolve(n) }, t.options.timeout), l }, t.filterBy = function (e) { var n = {}; return n[t.options.text] = e, n } }]).constant("dualListBoxConfig", { text: "name", sourceTitle: "Available Items", destinationTitle: "Selected Items", timeout: 500, textLength: 45, moveAllBtn: !0, maxAllBtn: 500, warning: "Are you sure you want to move this many items? Doing so can cause your browser to become unresponsive." }).directive("dualListBox", ["dualListBoxConfig", function (t) { return { restrict: "AE", require: ["^ngModel", "^dualListBox"], scope: { source: "=", controlDisabled: "&" }, replace: !0, templateUrl: "template/duallistbox/boxes.html", controller: "dualListBoxController", link: function (e, n, o, l) { var i = l[0], a = l[1]; e.sourceFilter = "", e.destinationFilter = "", e.destinationData = [], e.sourceData = [], e.options = {}, e.selectionBoxStyle = { width: "100%", height: "200px" }, angular.isDefined(o.height) && (e.selectionBoxStyle.height = o.height); for (var s in t) e.options[s] = angular.isDefined(o[s]) ? angular.isString(t[s]) ? o[s] : e.$parent.$eval(o[s]) : t[s]; i.$viewChangeListeners.push(function () { e.$eval(o.ngChange) }), a.init(i) } } }]);