/**
 * angular.duallistbox
 * @version v0.0.9 - 2015-01-07
 * @author Michael Walker (killyosaur@hotmail.com)
 * @link https://github.com/killyosaur/angularduallistbox
 * @license Creative Commons Attribution-ShareAlike 4.0 International License
**/
"use strict"; angular.module("killyosaur.dualListBox", []).run(["$templateCache", function (e) { e.put("template/duallistbox/boxes.html", '<div class="form-group row">    <div class="col-md-6">        <h4><span>{{options.sourceTitle}}</span><small> - showing {{sourceFiltered.length}}</small></h4>        <input style="margin-bottom: 5px;" class="filter form-control" type="text" ng-model="sourceFilter" placeholder="Filter" />        <button ng-show="options.moveAllBtn" data-type="atr" class="btn btn-default col-md-6" style="margin-bottom: 5px;" type="button" ng-click="move($event)" ng-disabled="sourceFiltered.length == 0">            <span class="glyphicon glyphicon-list"></span><span class="glyphicon glyphicon-chevron-right"></span>        </button>        <button data-type="str" class="btn btn-default " ng-class="{\'col-md-6 pull-right\': options.moveAllBtn, \'col-md-12\': !options.moveAllBtn}" style="margin-bottom: 5px;" type="button" ng-click="move($event)" ng-disabled="!sourceSelectedData.length || sourceSelectedData.length == 0">            <span class="glyphicon glyphicon-chevron-right"></span>        </button>        <select ng-style="selectionBoxStyle" multiple="multiple" ng-model="sourceSelectedData" ng-options="item[options.text] for item in sourceFiltered = (sourceData | filter:filterBy(sourceFilter))"></select>    </div>    <div class="col-md-6">        <h4><span>{{options.destinationTitle}}</span><small> - showing {{destinationFiltered.length ? destinationFiltered.length : 0}}</small></h4>        <input style="margin-bottom: 5px;" class="filter form-control" type="text" ng-model="destinationFilter" placeholder="Filter" />        <button data-type="stl" class="btn btn-default " ng-class="{\'col-md-6\': options.moveAllBtn, \'col-md-12\': !options.moveAllBtn}"style="margin-bottom: 5px;" type="button" ng-click="move($event)" ng-disabled="!destinationSelectedData.length || destinationSelectedData.length == 0">            <span class="glyphicon glyphicon-chevron-left"></span>        </button>        <button ng-show="options.moveAllBtn" data-type="atl" class="btn btn-default col-md-6 pull-right" style="margin-bottom: 5px;" type="button" ng-click="move($event)" ng-disabled="!destinationFiltered || destinationFiltered.length == 0">            <span class="glyphicon glyphicon-chevron-left"></span><span class="glyphicon glyphicon-list"></span>        </button>        <select ng-style="selectionBoxStyle" multiple="multiple" ng-model="destinationSelectedData" ng-options="item[options.text] for item in destinationFiltered = (destinationData | filter:filterBy(destinationFilter))"></select>    </div></div>') }]).controller("dualListBoxController", ["$scope", "$attrs", "$timeout", function (e, t, n) { function s(e, t) { var n = -1; angular.forEach(e, function (e, r) { if (angular.toJson(e) === angular.toJson(t)) { n = r } }); return n } var r = this, i = { $setViewValue: angular.noop }; this.init = function (e) { i = e; i.$render = function () { r.render() } }; this.render = function () { e.destinationData = i.$modelValue }; e.$watch("destinationData", function (t) { if (angular.isDefined(e.source) && angular.isArray(e.source)) { e.sourceData = []; angular.forEach(e.source, function (n) { if (angular.isUndefined(t) || s(t, n) === -1) e.sourceData.push(n) }) } else { throw "No valid data source available!" } }); e.move = function (t) { t.preventDefault(); var r = t.currentTarget; n(function () { var t = r.getAttribute("data-type"); var n = []; n = n.concat(e.destinationData); e.$apply(function () { switch (t) { case "atr": if (e.sourceData.length >= e.options.maxAllBtn && confirm(e.options.warning) || e.sourceData.length < e.options.maxAllBtn) { n = n ? n.concat(e.sourceData) : e.sourceData; if (e.sourceSelectedData) { e.sourceSelectedData.length = 0 } } break; case "atl": if (n.length >= e.options.maxAllBtn && confirm(e.options.warning) || n.length < e.options.maxAllBtn) { n.splice(0); if (e.destinationSelectedData) { e.destinationSelectedData.length = 0 } } break; case "str": n = n ? n.concat(e.sourceSelectedData) : e.sourceSelectedData; e.sourceSelectedData.length = 0; break; case "stl": angular.forEach(e.destinationSelectedData, function (t) { var r = s(e.destinationData, t); n.splice(r, 1) }); e.destinationSelectedData.length = 0; break } }); i.$setViewValue(n); i.$render() }, e.options.timeout) }; e.filterBy = function (t) { var n = {}; n[e.options.text] = t; return n } }]).constant("dualListBoxConfig", { text: "name", sourceTitle: "Available Items", destinationTitle: "Selected Items", timeout: 500, textLength: 45, moveAllBtn: true, maxAllBtn: 500, warning: "Are you sure you want to move this many items? Doing so can cause your browser to become unresponsive." }).directive("dualListBox", ["dualListBoxConfig", function (e) { return { restrict: "AE", require: ["^ngModel", "^dualListBox"], scope: { source: "=" }, replace: true, templateUrl: "template/duallistbox/boxes.html", controller: "dualListBoxController", link: function (t, n, r, i) { var s = i[0], o = i[1]; t.sourceFilter = ""; t.destinationFilter = ""; t.destinationData = []; t.sourceData = []; t.options = {}; t.selectionBoxStyle = { width: "100%", height: "200px" }; if (angular.isDefined(r.height)) { t.selectionBoxStyle.height = r.height } for (var u in e) { t.options[u] = angular.isDefined(r[u]) ? t.$parent.$eval(r[u]) : e[u] } s.$viewChangeListeners.push(function () { t.$eval(r.ngChange) }); o.init(s) } } }])