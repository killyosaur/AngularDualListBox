/**
 * angular.duallistbox
 * @version v0.0.4 - 2015-01-06
 * @author Michael Walker (killyosaur@hotmail.com)
 * @link https://github.com/killyosaur/angularduallistbox
 * @license Creative Commons Attribution-ShareAlike 4.0 International License
**/
"use strict"; angular.module("killyosaur.dualListBox", []).run(["$templateCache", function (e) { e.put("template/duallistbox/boxes.html", '<div class="form-group row">    <div class="col-md-6">        <h4><span>{{options.sourceTitle}}</span><small> - showing {{sourceFiltered.length}}</small></h4>        <input style="margin-bottom: 5px;" class="filter form-control" type="text" ng-model="sourceFilter" placeholder="Filter" />        <button ng-show="options.moveAllBtn" data-type="atr" class="btn btn-default col-md-6" style="margin-bottom: 5px;" type="button" ng-click="move($event)" ng-disabled="sourceFiltered.length == 0">            <span class="glyphicon glyphicon-list"></span><span class="glyphicon glyphicon-chevron-right"></span>        </button>        <button data-type="str" class="btn btn-default " ng-class="{\'col-md-6 pull-right\': options.moveAllBtn, \'col-md-12\': !options.moveAllBtn}" style="margin-bottom: 5px;" type="button" ng-click="move($event)" ng-disabled="!sourceSelectedData.length || sourceSelectedData.length == 0">            <span class="glyphicon glyphicon-chevron-right"></span>        </button>        <select ng-style="selectionBoxStyle" multiple="multiple" ng-model="sourceSelectedData" ng-options="item[options.text] for item in sourceFiltered = (sourceData | filter:filterBy(sourceFilter))"></select>    </div>    <div class="col-md-6">        <h4><span>{{options.destinationTitle}}</span><small> - showing {{destinationFiltered.length ? destinationFiltered.length : 0}}</small></h4>        <input style="margin-bottom: 5px;" class="filter form-control" type="text" ng-model="destinationFilter" placeholder="Filter" />        <button dat-type="stl" class="btn btn-default " ng-class="{\'col-md-6\': options.moveAllBtn, \'col-md-12\': !options.moveAllBtn}"style="margin-bottom: 5px;" type="button" ng-click="move($event)" ng-disabled="!destinationSelectedData.length || destinationSelectedData.length == 0">            <span class="glyphicon glyphicon-chevron-left"></span>        </button>        <button ng-show="options.moveAllBtn" data-type="atl" class="btn btn-default col-md-6 pull-right" style="margin-bottom: 5px;" type="button" ng-click="move($event)" ng-disabled="!destinationFiltered || destinationFiltered.length == 0">            <span class="glyphicon glyphicon-chevron-left"></span><span class="glyphicon glyphicon-list"></span>        </button>        <select ng-style="selectionBoxStyle" multiple="multiple" ng-model="destinationSelectedData" ng-options="item[options.text] for item in destinationFiltered = (destinationData | filter:filterBy(destinationFilter))"></select>    </div></div>') }]).directive("dualListBox", ["$compile", "$timeout", "$filter", "$http", function (e, t, n, r) { return { restrict: "AE", require: "^ngModel", scope: { source: "=" }, replace: true, templateUrl: "template/duallistbox/boxes.html", link: function (e, n, i, s) { e.sourceFilter = ""; e.destinationFilter = ""; e.destinationData = []; e.sourceData = []; e.options = { text: "name", sourceTitle: "Available Items", destinationTitle: "Selected Items", timeout: 500, textLength: 45, moveAllBtn: true, maxAllBtn: 500, warning: "Are you sure you want to move this many items? Doing so can cause your browser to become unresponsive." }; e.selectionBoxStyle = { width: "100%", height: "200px" }; if (i.height) { e.selectionBoxStyle.height = i.height } for (var o in e.options) { if (i[o]) { e.options[o] = i[o] } } if (angular.isDefined(e.source) && angular.isArray(e.source)) { angular.forEach(e.source, function (t) { e.sourceData.push(t) }) } else if (angular.isDefined(e.source) && angular.isFunction(e.source)) { angular.forEach(e.source(), function (t) { e.sourceData.push(t) }) } else if (angular.isDefined(e.source) && angular.isString(e.source)) { r.get(e.source).success(function (t) { angular.forEach(t, function (t) { e.sourceData.push(t) }) }).error(function (e) { throw e }) } else { throw "No valid data source available!" } if (i.ngChange) { s.$viewChangeListeners.push(function () { e.$eval(attrs.ngChange) }) } s.$render = function () { e.destinationData = s.$viewValue }; e.$watch("destinationData", function () { if (angular.isDefined(e.destinationData) && e.destinationData.length > 0) { angular.forEach(e.destinationData, function (t) { var n = e.sourceData.indexOf(t); if (n > -1) e.sourceData.splice(n, 1) }) } }); e.move = function (n) { n.preventDefault(); var r = n.currentTarget; var i = r.getAttribute("data-type"); var o = e.destinationData; switch (i) { case "atr": if (e.sourceData.length >= e.options.maxAllBtn && confirm(e.options.warning) || e.sourceData.length < e.options.maxAllBtn) { t(function () { o = o ? o.concat(e.sourceData) : e.sourceData }, options.timeout) } break; case "atl": if (o.length >= e.options.maxAllBtn && confirm(e.options.warning) || o.length < e.options.maxAllBtn) { t(function () { e.sourceData = e.sourceData.concat(o); o.splice(0) }, e.options.timeout) } if (o.length > 0) { throw "Move timed out before operation could complete" } break; case "str": o = o ? o.concat(e.sourceSelectedData) : e.sourceSelectedData; break; case "stl": e.sourceData = e.sourceData.concat(e.destinationSelectedData); angular.forEach(e.destinationSelectedData, function (t) { var n = e.destinationData.indexOf(t); o.splice(n, 1) }); break } s.$setViewValue(o); s.$render() }; e.filterBy = function (t) { var n = {}; n[e.options.text] = t; return n } } } }])